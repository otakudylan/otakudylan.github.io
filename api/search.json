[{"id":"c600688d073d75a81ea077c685a8b9b2","title":"UE4 GAS","content":"AbilitySystemComponentASC提供了三种不同的复制模式，用以复制GameplayEffects、GameplayTags 和 GameplayCues，分别是Full, Mixed, 和 Minimal。Attributes是由 AttributeSet复制。\n\n\n\n复制模式\n使用场景\n描述\n\n\n\nFull\n单人\nGameplayEffect会被复制到所有客户端。\n\n\nMixed\n多人,玩家控制的Actors\nGameplayEffects仅被复制到拥有者的客户端. 仅 GameplayTags 和 GameplayCues 会被复制到所有客户端\n\n\nMinimal\n多人, AI控制的Actors\nGameplayEffects不会复制到任何客户端. 仅 GameplayTags 和 GameplayCues 会被复制到所有客户端\n\n\n注意： Mixed 复制模式要求OwnerActor的 Owner必须是Controller。 PlayerState的 Owner默认是Controller，但是Character不是。如果使用Mixed复制模式的OwnerActor不是PlayerState那么你需要在OwnerActor上调用SetOwner()并传递一个有效的Controller。（不过从4.24开始, PossessedBy() 会为Pawn设置一个新的Controller。）\nASC需要有OwnerActor和AvatarActor进行初始化，而且必须在服务器和客户端都要完成初始化。\n对于玩家控制的角色，ASC存在于Pawn中，我通常在Pawn的 PossessedBy()方法中完成ASC在服务器端的初始化，在PlayerController的AcknowledgePawn()方法中完成ASC在客户端的初始化。\n对于玩家控制的角色，ASC存在于PlayerState中，我通常在Pawn 的PossessedBy() 方法中完成ASC在服务器端的初始化（这一点与上述相同），在 Pawn的 OnRep_PlayerState()方法中完成ASC在客户端的初始化（这将确保PlayerState在客户端已存在）\nGameplayTags(前面多花精力想好结构和名字，这玩意尽可能的不要在后面改)多个GameplayTags可以被存储到FGameplayTagContainer中。强烈建议使用GameplayTagContainer而不是TArray&lt;FGameplayTag&gt;，因为GameplayTagContainers添加了一些例其高效的魔法。 标签是标准的FNames，在FGameplayTagContainers中他们可以被高效的打包在一起以完成网络复制，当然需要先在项目设置中开启Fast Replication。Fast Replication要求服务器和客户端拥有相同的GameplayTags列表。为了遍历GameplayTagContainers也可以返回一个TArray&lt;FGameplayTag&gt;。\nASC 也可以添加不会被复制并且需要手动管理的LooseGameplayTags。\n","slug":"UE4-GAS","date":"2022-01-01T10:56:00.000Z","categories_index":"UE4","tags_index":"UE4","author_index":"Dylan"}]