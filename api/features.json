[{"title":"leetcode-非递归遍历二叉树","uid":"5f1dca04d0fa251a1a5a436620e41b44","slug":"leetcode-非递归遍历二叉树","date":"2022-01-05T16:36:31.000Z","updated":"2022-01-05T16:38:53.282Z","comments":true,"path":"api/articles/leetcode-非递归遍历二叉树.json","cover":"https://s2.loli.net/2022/01/03/l4s8z6unVDYITN9.jpg","text":"&#x2F;&#x2F; 前序 vector&lt;int&gt;preorderTraversal(TreeNode* root) &#123; vector&lt;int&gt; res; if (!root) return res; stack&lt;TreeNode*&g...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":1,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"leetcode","slug":"leetcode","count":1,"path":"api/tags/leetcode.json"},{"name":"二叉树","slug":"二叉树","count":1,"path":"api/tags/二叉树.json"}],"author":{"name":"Dylan","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/02/Uh28kIuHP3TD4tc.jpg","link":"/","description":"No Game No Life","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"类的特殊非静态成员函数","uid":"52d648ff3e6bea3e12a567ee8b6734e9","slug":"Cpp-类的特殊非静态成员函数","date":"2022-01-05T13:04:21.000Z","updated":"2022-01-05T16:29:11.027Z","comments":true,"path":"api/articles/Cpp-类的特殊非静态成员函数.json","cover":"https://s2.loli.net/2022/01/03/eukLiQmY5qfdhns.jpg","text":"类里面存在六个特种成员函数 默认构造函数 一般形式：Obj(); 拷贝构造函数 一般形式：Obj(const Obj&amp;); 拷贝赋值运算符一般形式：Obj&amp; operator=(const Obj&amp;);或Obj&amp; operator=(Obj); 移...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"C++","slug":"C","count":3,"path":"api/categories/C.json"}],"tags":[{"name":"C++","slug":"C","count":3,"path":"api/tags/C.json"},{"name":"成员函数","slug":"成员函数","count":1,"path":"api/tags/成员函数.json"},{"name":"默认提供","slug":"默认提供","count":1,"path":"api/tags/默认提供.json"}],"author":{"name":"Dylan","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/02/Uh28kIuHP3TD4tc.jpg","link":"/","description":"No Game No Life","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"auto类型推导","uid":"f7cb7d701b00fc37f4d06f66b3862db0","slug":"Cpp-auto类型推导","date":"2022-01-04T15:25:31.000Z","updated":"2022-01-04T16:07:26.260Z","comments":true,"path":"api/articles/Cpp-auto类型推导.json","cover":"https://s2.loli.net/2022/01/03/eukLiQmY5qfdhns.jpg","text":"auto类型推导一般情况，auto类型推导和模板类型推导是一模一样的，但是auto类型推导会假定用大括号括起来的初始化表达式代表一个std::initializer_list,而这种情况下，形参为T的模板无法推导T的类型。 一般情况auto类型推导和模板类型推导可以建立一一映射：...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"C++","slug":"C","count":3,"path":"api/categories/C.json"}],"tags":[{"name":"C++","slug":"C","count":3,"path":"api/tags/C.json"},{"name":"auto","slug":"auto","count":1,"path":"api/tags/auto.json"},{"name":"类型推导","slug":"类型推导","count":2,"path":"api/tags/类型推导.json"}],"author":{"name":"Dylan","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/02/Uh28kIuHP3TD4tc.jpg","link":"/","description":"No Game No Life","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}]