{"title":"左值和右值","uid":"72f33999f30e7ed774f0242356dfc348","slug":"Cpp-左值和右值","date":"2022-01-07T14:48:56.000Z","updated":"2022-01-07T15:31:59.350Z","comments":true,"path":"api/articles/Cpp-左值和右值.json","keywords":"C++,python,图形学,UE4,leetcode","cover":"https://s2.loli.net/2022/01/03/eukLiQmY5qfdhns.jpg","content":"<h1 id=\"值的类别\"><a href=\"#值的类别\" class=\"headerlink\" title=\"值的类别\"></a>值的类别</h1><h2 id=\"左值（lvalue）\"><a href=\"#左值（lvalue）\" class=\"headerlink\" title=\"左值（lvalue）\"></a>左值（lvalue）</h2><p><code>int&amp;  lvalue();</code>  </p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>有标识符，可以取地址</li>\n<li>非const左值可以放在赋值运算符的左侧。<br>注：const左值只有在初始化时可以放在赋值运算符左侧；左值和右值表达式都可以是const或non-const。  </li>\n</ul>\n<p><strong>常见左值：</strong></p>\n<ul>\n<li>变量，<strong>函数名字</strong></li>\n<li>左值对象的成员</li>\n<li>返回左值引用的表达式，如<code>++x</code>（返回值是int&amp;)、<code>x = 1</code>、<code>cout &lt;&lt; &quot;&quot;</code></li>\n<li>字符串字面量，如”hello world”</li>\n</ul>\n<h2 id=\"纯右值（prvalue）\"><a href=\"#纯右值（prvalue）\" class=\"headerlink\" title=\"纯右值（prvalue）\"></a>纯右值（prvalue）</h2><p><code>int   prvalue();</code>  </p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>没有标识符，不能取地址的“临时对象”</li>\n<li>不可以放在赋值运算符的左侧   </li>\n</ul>\n<p><strong>常见右值：</strong></p>\n<ul>\n<li>返回类型非引用的函数调用或运算符表达式，如<code>x++</code>（返回值是int）、<code>1 + 2</code>（返回值是int）</li>\n<li>除字符串字面量外的字面量，如<code>true</code>、<code>42</code></li>\n<li>lambda表达式</li>\n</ul>\n<h2 id=\"将亡值（xvalue）C-11引入\"><a href=\"#将亡值（xvalue）C-11引入\" class=\"headerlink\" title=\"将亡值（xvalue）C++11引入\"></a>将亡值（xvalue）C++11引入</h2><p><code>int&amp;&amp; xvalue();</code>  </p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>C++11引入，和纯右值合称为”右值”</li>\n<li>不可以放在运算符的左侧</li>\n</ul>\n<p><strong>常见情况：</strong></p>\n<ul>\n<li>右值对象和数组的成员</li>\n<li>返回右值引用的表达式，如<code>std::move(x)</code>(返回值是T&amp;&amp;)</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/01/07/PcVr2YMnJBQqRAi.png\" alt=\"左值和右值\"></p>\n<h1 id=\"重要的一点\"><a href=\"#重要的一点\" class=\"headerlink\" title=\"重要的一点\"></a>重要的一点</h1><p><strong>形参总是左值，即使其类型是右值引用。</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">Vector(Vector&amp;&amp; rhs) &#x2F;&#x2F; rhs是左值。\n&#123;\n    ...\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"为什么这么分类？\"><a href=\"#为什么这么分类？\" class=\"headerlink\" title=\"为什么这么分类？\"></a>为什么这么分类？</h1><p><strong>目的是为了C++11里的移动。</strong></p>\n<p>C++11里引入移动后的成员函数重载形式:</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">T::T(const T&amp; rhs); &#x2F;&#x2F; 拷贝\nT::T(T&amp;&amp; rhs); &#x2F;&#x2F; 移动\n\nT&amp; T::operator&#x3D;(const T&amp; rhs); &#x2F;&#x2F; 拷贝\nT&amp; T::operator&#x3D;(T&amp;&amp; rhs); &#x2F;&#x2F; 移动<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当传进来是广义左值（glvalue）的时候调用拷贝，传进来是右值（rvalue）的时候调用移动。</p>\n<h2 id=\"C-98里的左值和纯右值\"><a href=\"#C-98里的左值和纯右值\" class=\"headerlink\" title=\"C++98里的左值和纯右值\"></a>C++98里的左值和纯右值</h2><ul>\n<li>左值可以绑定到左值引用</li>\n<li>纯右值可以绑定到常左值引用</li>\n</ul>\n<h2 id=\"C-11里的左值、纯右值和将亡值\"><a href=\"#C-11里的左值、纯右值和将亡值\" class=\"headerlink\" title=\"C++11里的左值、纯右值和将亡值\"></a>C++11里的左值、纯右值和将亡值</h2><ul>\n<li>左值可以绑定到左值引用</li>\n<li>纯右值/将亡值优先绑定到右值引用  </li>\n</ul>\n<p>（这里以后还需要仔细分析，并没有总结出为什么这么分类…）<br>问题：<br>有标识符的是左值？可以移动的是右值？可以这么分类吗？</p>\n","feature":true,"text":"值的类别左值（lvalue）int&amp; lvalue(); 特点： 有标识符，可以取地址 非const左值可以放在赋值运算符的左侧。注：const左值只有在初始化时可以放在赋值运算符左侧；左值和右值表达式都可以是const或non-const。 常见左值： 变量，函数名字 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"C++","slug":"C","count":5,"path":"api/categories/C.json"}],"tags":[{"name":"C++","slug":"C","count":5,"path":"api/tags/C.json"},{"name":"左值","slug":"左值","count":1,"path":"api/tags/左值.json"},{"name":"右值","slug":"右值","count":1,"path":"api/tags/右值.json"},{"name":"将亡值","slug":"将亡值","count":1,"path":"api/tags/将亡值.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%80%BC%E7%9A%84%E7%B1%BB%E5%88%AB\"><span class=\"toc-text\">值的类别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%A6%E5%80%BC%EF%BC%88lvalue%EF%BC%89\"><span class=\"toc-text\">左值（lvalue）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%AF%E5%8F%B3%E5%80%BC%EF%BC%88prvalue%EF%BC%89\"><span class=\"toc-text\">纯右值（prvalue）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%86%E4%BA%A1%E5%80%BC%EF%BC%88xvalue%EF%BC%89C-11%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">将亡值（xvalue）C++11引入</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%87%8D%E8%A6%81%E7%9A%84%E4%B8%80%E7%82%B9\"><span class=\"toc-text\">重要的一点</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%88%86%E7%B1%BB%EF%BC%9F\"><span class=\"toc-text\">为什么这么分类？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-98%E9%87%8C%E7%9A%84%E5%B7%A6%E5%80%BC%E5%92%8C%E7%BA%AF%E5%8F%B3%E5%80%BC\"><span class=\"toc-text\">C++98里的左值和纯右值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-11%E9%87%8C%E7%9A%84%E5%B7%A6%E5%80%BC%E3%80%81%E7%BA%AF%E5%8F%B3%E5%80%BC%E5%92%8C%E5%B0%86%E4%BA%A1%E5%80%BC\"><span class=\"toc-text\">C++11里的左值、纯右值和将亡值</span></a></li></ol></li></ol>","author":{"name":"Dylan","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/02/Uh28kIuHP3TD4tc.jpg","link":"/","description":"No Game No Life","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"【ActionRPG初始流程】01-GameInstance初始化","uid":"f7a81dd110156408592db1711ed8886d","slug":"UE4-ActionRPG初始流程-1","date":"2022-01-08T08:15:50.000Z","updated":"2022-01-08T08:55:21.601Z","comments":true,"path":"api/articles/UE4-ActionRPG初始流程-1.json","keywords":"C++,python,图形学,UE4,leetcode","cover":"https://s2.loli.net/2022/01/03/Ym9bIshjoP2ER7M.jpg","text":"GameInstance Init ","link":"","photos":[],"count_time":{"symbolsCount":18,"symbolsTime":"1 mins."},"categories":[{"name":"UE4","slug":"UE4","count":2,"path":"api/categories/UE4.json"}],"tags":[{"name":"UE4","slug":"UE4","count":2,"path":"api/tags/UE4.json"},{"name":"ActionRPG","slug":"ActionRPG","count":1,"path":"api/tags/ActionRPG.json"}],"author":{"name":"Dylan","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/02/Uh28kIuHP3TD4tc.jpg","link":"/","description":"No Game No Life","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"右值引用、移动语义和完美转发","uid":"76474e446991cce6bc400a1a99996030","slug":"Cpp-右值引用、移动语义和完美转发","date":"2022-01-07T13:23:56.000Z","updated":"2022-01-07T15:24:51.360Z","comments":true,"path":"api/articles/Cpp-右值引用、移动语义和完美转发.json","keywords":"C++,python,图形学,UE4,leetcode","cover":"https://s2.loli.net/2022/01/03/eukLiQmY5qfdhns.jpg","text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[{"name":"C++","slug":"C","count":5,"path":"api/categories/C.json"}],"tags":[{"name":"C++","slug":"C","count":5,"path":"api/tags/C.json"},{"name":"右值引用","slug":"右值引用","count":1,"path":"api/tags/右值引用.json"},{"name":"移动语义","slug":"移动语义","count":1,"path":"api/tags/移动语义.json"},{"name":"完美转发","slug":"完美转发","count":1,"path":"api/tags/完美转发.json"}],"author":{"name":"Dylan","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/02/Uh28kIuHP3TD4tc.jpg","link":"/","description":"No Game No Life","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}