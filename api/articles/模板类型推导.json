{"title":"模板类型推导","uid":"74bd91e54bf2c495459c34d0d276fa06","slug":"模板类型推导","date":"2022-01-03T12:32:36.000Z","updated":"2022-01-03T15:15:10.589Z","comments":true,"path":"api/articles/模板类型推导.json","keywords":"C++,python,图形学,UE4,leetcode","cover":"https://s2.loli.net/2022/01/03/eukLiQmY5qfdhns.jpg","content":"<h1 id=\"类型推导\"><a href=\"#类型推导\" class=\"headerlink\" title=\"类型推导\"></a>类型推导</h1><p><strong>C++是静态类型语言，所有的类型推导都是在编译期间完成的。</strong></p>\n<h2 id=\"模板类型推导\"><a href=\"#模板类型推导\" class=\"headerlink\" title=\"模板类型推导\"></a>模板类型推导</h2><p>函数模板调用的一般形式为：</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">template&lt;typename T&gt;\nvoid f(ParamType param);\n\nf(expr);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>类型推导一共分三种一般情况和两种特殊情况</p>\n<h3 id=\"情况1：ParamType是个指针或引用，但不是万能引用\"><a href=\"#情况1：ParamType是个指针或引用，但不是万能引用\" class=\"headerlink\" title=\"情况1：ParamType是个指针或引用，但不是万能引用\"></a>情况1：ParamType是个指针或引用，但不是万能引用</h3><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F; ParamType为引用\ntemplate&lt;typename T&gt;\nvoid f(T&amp; param);\n\n&#x2F;&#x2F; ParamType为引用\ntemplate&lt;typename T&gt;\nvoid f(T* param);\n\nf(expr);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>这种情况下，如果expr具有引用类型，先将引用类型忽略，再执行模式匹配。</strong></li>\n</ul>\n<p>ParamType为引用还是指针，其运行方式是一样的。</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;boost&#x2F;type_index.hpp&gt;\n#include &lt;iostream&gt;\n\ntemplate&lt;typename T&gt;\nvoid f(T&amp; param) &#123;\n\tusing std::cout;\n\tusing std::endl;\n\tusing boost::typeindex::type_id_with_cvr;\n\n\tcout &lt;&lt; &quot;匹配形参为T&amp;的模板函数:&quot; &lt;&lt; endl;\n\t&#x2F;&#x2F; 显示T的类型\n\tcout &lt;&lt; &quot;T&#39;s type &#x3D;\\t&quot;\n\t\t&lt;&lt; type_id_with_cvr&lt;T&gt;().pretty_name()\n\t\t&lt;&lt; endl;\n\n\t&#x2F;&#x2F; 显示param的类型(ParamType)\n\tcout &lt;&lt; &quot;param&#39;s type &#x3D;\\t&quot;\n\t\t&lt;&lt; type_id_with_cvr&lt;decltype(param)&gt;().pretty_name()\n\t\t&lt;&lt; endl;\n&#125;\n\ntemplate&lt;typename T&gt;\nvoid f(T* param) &#123;\n\tusing std::cout;\n\tusing std::endl;\n\tusing boost::typeindex::type_id_with_cvr;\n\n\tcout &lt;&lt; &quot;匹配形参为T*的模板函数:&quot; &lt;&lt; endl;\n\t&#x2F;&#x2F; 显示T的类型\n\tcout &lt;&lt; &quot;T&#39;s type &#x3D;\\t&quot;\n\t\t&lt;&lt; type_id_with_cvr&lt;T&gt;().pretty_name()\n\t\t&lt;&lt; endl;\n\n\t&#x2F;&#x2F; 显示param的类型(ParamType)\n\tcout &lt;&lt; &quot;param&#39;s type &#x3D;\\t&quot;\n\t\t&lt;&lt; type_id_with_cvr&lt;decltype(param)&gt;().pretty_name()\n\t\t&lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\tint x &#x3D; 27;\n\tconst int cx &#x3D; x;\n\tconst int &amp;rx &#x3D; x;\n\tconst int *px &#x3D; &amp;x;\n\n\tf(x);\n\tf(cx);\n\tf(rx);\n\tf(&amp;x);\n\tf(px);\n&#125;\n\n&#x2F;*\n执行结果(int const 和const int 没有区别)\n匹配形参为T&amp;的模板函数:\nT&#39;s type &#x3D;      int\nparam&#39;s type &#x3D;  int &amp;\n匹配形参为T&amp;的模板函数 :\nT&#39;s type &#x3D;      int const\nparam&#39;s type &#x3D;  int const &amp;\n匹配形参为T&amp;的模板函数 :\nT&#39;s type &#x3D;      int const\nparam&#39;s type &#x3D;  int const &amp;\n匹配形参为T*的模板函数 :\nT&#39;s type &#x3D;      int\nparam&#39;s type &#x3D;  int *\n匹配形参为T*的模板函数 :\nT&#39;s type &#x3D;      int const\nparam&#39;s type &#x3D;  int const *\n*&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"情况2：ParamType是万能引用\"><a href=\"#情况2：ParamType是万能引用\" class=\"headerlink\" title=\"情况2：ParamType是万能引用\"></a>情况2：ParamType是万能引用</h3><p>该情况较为复杂，这里简要给出大纲，以后再详细讨论。</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">template&lt;typename T&gt;\nvoid f(T&amp;&amp; param);\n\nf(expr);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>如果expr是左值，T和ParamType都会推导为左值引用。</strong></li>\n<li><strong>如果expr是右值，T推导为expr的类型，ParamType推导为右值引用。</strong><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;boost&#x2F;type_index.hpp&gt;\n#include &lt;iostream&gt;\n\ntemplate&lt;typename T&gt;\nvoid f(T&amp;&amp; param) &#123;\n\tusing std::cout;\n\tusing std::endl;\n\tusing boost::typeindex::type_id_with_cvr;\n\n\tcout &lt;&lt; &quot;匹配形参为T&amp;&amp;的模板函数:&quot; &lt;&lt; endl;\n\t&#x2F;&#x2F; 显示T的类型\n\tcout &lt;&lt; &quot;T&#39;s type &#x3D;\\t&quot;\n\t\t&lt;&lt; type_id_with_cvr&lt;T&gt;().pretty_name()\n\t\t&lt;&lt; endl;\n\n\t&#x2F;&#x2F; 显示param的类型(ParamType)\n\tcout &lt;&lt; &quot;param&#39;s type &#x3D;\\t&quot;\n\t\t&lt;&lt; type_id_with_cvr&lt;decltype(param)&gt;().pretty_name()\n\t\t&lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\tint x &#x3D; 27;\n\tconst int cx &#x3D; x;\n\tconst int &amp;rx &#x3D; x;\n\tconst int *px &#x3D; &amp;x;\n\n\tf(x);\n\tf(cx);\n\tf(rx);\n\tf(&amp;x);\n\tf(px);\n\tf(27);\n&#125;\n\n&#x2F;*\n执行结果:\n匹配形参为T&amp;&amp;的模板函数:\nT&#39;s type &#x3D;      int &amp;\nparam&#39;s type &#x3D;  int &amp;\n匹配形参为T&amp;&amp;的模板函数:\nT&#39;s type &#x3D;      int const &amp;\nparam&#39;s type &#x3D;  int const &amp;\n匹配形参为T&amp;&amp;的模板函数:\nT&#39;s type &#x3D;      int const &amp;\nparam&#39;s type &#x3D;  int const &amp;\n匹配形参为T&amp;&amp;的模板函数:\nT&#39;s type &#x3D;      int *\nparam&#39;s type &#x3D;  int * &amp;&amp;\n匹配形参为T&amp;&amp;的模板函数:\nT&#39;s type &#x3D;      int const * &amp;\nparam&#39;s type &#x3D;  int const * &amp;\n匹配形参为T&amp;&amp;的模板函数:\nT&#39;s type &#x3D;      int\nparam&#39;s type &#x3D;  int &amp;&amp;\n*&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"情况3：ParamType既非指针也非引用\"><a href=\"#情况3：ParamType既非指针也非引用\" class=\"headerlink\" title=\"情况3：ParamType既非指针也非引用\"></a>情况3：ParamType既非指针也非引用</h3><ul>\n<li><strong>若expr具有引用类型，则忽略引用部分。</strong></li>\n<li><strong>若expr是个volatile对象，则忽略volatile部分。</strong></li>\n<li><strong>若expr是个被const修饰的引用，忽略const部分。</strong></li>\n<li><strong>若expr是个被const修饰的指针，忽略顶层const部分。</strong>（const int<em>是底层const,即指向常量的指针； int</em> const是顶层const，即指针常量)<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;boost&#x2F;type_index.hpp&gt;\n#include &lt;iostream&gt;\n\ntemplate&lt;typename T&gt;\nvoid f(T param) &#123;\n\tusing std::cout;\n\tusing std::endl;\n\tusing boost::typeindex::type_id_with_cvr;\n\n\tcout &lt;&lt; &quot;匹配形参为T的模板函数:&quot; &lt;&lt; endl;\n\t&#x2F;&#x2F; 显示T的类型\n\tcout &lt;&lt; &quot;T&#39;s type &#x3D;\\t&quot;\n\t\t&lt;&lt; type_id_with_cvr&lt;T&gt;().pretty_name()\n\t\t&lt;&lt; endl;\n\n\t&#x2F;&#x2F; 显示param的类型(ParamType)\n\tcout &lt;&lt; &quot;param&#39;s type &#x3D;\\t&quot;\n\t\t&lt;&lt; type_id_with_cvr&lt;decltype(param)&gt;().pretty_name()\n\t\t&lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\tint x &#x3D; 27;\n\tconst int cx &#x3D; x;\n\tconst int &amp;rx &#x3D; x;\n\tconst int *pa &#x3D; &amp;x; &#x2F;&#x2F; 底层const\n\tint* const pb &#x3D; &amp;x; &#x2F;&#x2F; 顶层const\n\n\tf(x);\n\tf(cx);\n\tf(rx);\n\tf(pa);\n\tf(pb);\n&#125;\n\n&#x2F;*\n执行结果:\n匹配形参为T的模板函数:\nT&#39;s type &#x3D;      int\nparam&#39;s type &#x3D;  int\n匹配形参为T的模板函数:\nT&#39;s type &#x3D;      int\nparam&#39;s type &#x3D;  int\n匹配形参为T的模板函数:\nT&#39;s type &#x3D;      int\nparam&#39;s type &#x3D;  int\n匹配形参为T的模板函数:\nT&#39;s type &#x3D;      int const *\nparam&#39;s type &#x3D;  int const *\n匹配形参为T的模板函数: \nT&#39;s type &#x3D;      int *\nparam&#39;s type &#x3D;  int *  &#x2F;&#x2F; 指针本身的常量属性被忽略了\n*&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"特殊情况1：数组实参\"><a href=\"#特殊情况1：数组实参\" class=\"headerlink\" title=\"特殊情况1：数组实参\"></a>特殊情况1：数组实参</h3><ul>\n<li><strong>当数组传给按值形参的模板时，数组会推导为指针。</strong></li>\n<li><strong>当数组传给引用形参的模板时，数组会推导为数组类型。</strong></li>\n</ul>\n<p>形参为值传递的模板：</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;boost&#x2F;type_index.hpp&gt;\n#include &lt;iostream&gt;\n\ntemplate&lt;typename T&gt;\nvoid f(T param) &#123;\n\tusing std::cout;\n\tusing std::endl;\n\tusing boost::typeindex::type_id_with_cvr;\n\n\tcout &lt;&lt; &quot;匹配形参为T的模板函数:&quot; &lt;&lt; endl;\n\t&#x2F;&#x2F; 显示T的类型\n\tcout &lt;&lt; &quot;T&#39;s type &#x3D;\\t&quot;\n\t\t&lt;&lt; type_id_with_cvr&lt;T&gt;().pretty_name()\n\t\t&lt;&lt; endl;\n\n\t&#x2F;&#x2F; 显示param的类型(ParamType)\n\tcout &lt;&lt; &quot;param&#39;s type &#x3D;\\t&quot;\n\t\t&lt;&lt; type_id_with_cvr&lt;decltype(param)&gt;().pretty_name()\n\t\t&lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\tint keyVals[] &#x3D; &#123; 1,3,5,7,9 &#125;;\n\n\tf(keyVals);\n&#125;\n\n&#x2F;*\n匹配形参为T的模板函数:\nT&#39;s type &#x3D;      int *\nparam&#39;s type &#x3D;  int *\n*&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>形参为引用传递的模板：</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;boost&#x2F;type_index.hpp&gt;\n#include &lt;iostream&gt;\n\ntemplate&lt;typename T&gt;\nvoid f(T&amp; param) &#123;\n\tusing std::cout;\n\tusing std::endl;\n\tusing boost::typeindex::type_id_with_cvr;\n\n\tcout &lt;&lt; &quot;匹配形参为T&amp;的模板函数:&quot; &lt;&lt; endl;\n\t&#x2F;&#x2F; 显示T的类型\n\tcout &lt;&lt; &quot;T&#39;s type &#x3D;\\t&quot;\n\t\t&lt;&lt; type_id_with_cvr&lt;T&gt;().pretty_name()\n\t\t&lt;&lt; endl;\n\n\t&#x2F;&#x2F; 显示param的类型(ParamType)\n\tcout &lt;&lt; &quot;param&#39;s type &#x3D;\\t&quot;\n\t\t&lt;&lt; type_id_with_cvr&lt;decltype(param)&gt;().pretty_name()\n\t\t&lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\tint keyVals[] &#x3D; &#123; 1,3,5,7,9 &#125;;\n\n\tf(keyVals);\n&#125;\n\n&#x2F;*\n匹配形参为T&amp;的模板函数:\nT&#39;s type &#x3D;      int [5]\nparam&#39;s type &#x3D;  int (&amp;)[5]\n*&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可利用引用传递保留数组属性这一点，结合非类型模板参数，推导出数组元素个数。</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">template&lt;typename T, std::size_t N&gt;\nconstexpr std::size_t arraySize(T(&amp;)[N]) noexcept &#123;\n\treturn N;\n&#125;\n\nint main() &#123;\n\tusing std::cout;\n\tusing std::endl;\n\tint keyVals[] &#x3D; &#123; 1,3,5,7,9 &#125;;\n\n\tcout &lt;&lt; arraySize(keyVals) &lt;&lt; endl;\n&#125;\n\n&#x2F;*\n执行结果：\n5\n*&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"特殊情况2：函数实参\"><a href=\"#特殊情况2：函数实参\" class=\"headerlink\" title=\"特殊情况2：函数实参\"></a>特殊情况2：函数实参</h3><ul>\n<li><strong>当函数传给按值或引用形参的模板时，函数会退化为函数指针或函数引用。</strong><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;boost&#x2F;type_index.hpp&gt;\n#include &lt;iostream&gt;\n\nvoid someFunc(int, double) &#123;&#125;\n\ntemplate&lt;typename T&gt;\nvoid f1(T param) &#123;\n\tusing std::cout;\n\tusing std::endl;\n\tusing boost::typeindex::type_id_with_cvr;\n\n\tcout &lt;&lt; &quot;匹配形参为T的模板函数:&quot; &lt;&lt; endl;\n\t&#x2F;&#x2F; 显示T的类型\n\tcout &lt;&lt; &quot;T&#39;s type &#x3D;\\t&quot;\n\t\t&lt;&lt; type_id_with_cvr&lt;T&gt;().pretty_name()\n\t\t&lt;&lt; endl;\n\n\t&#x2F;&#x2F; 显示param的类型(ParamType)\n\tcout &lt;&lt; &quot;param&#39;s type &#x3D;\\t&quot;\n\t\t&lt;&lt; type_id_with_cvr&lt;decltype(param)&gt;().pretty_name()\n\t\t&lt;&lt; endl;\n&#125;\n\ntemplate&lt;typename T&gt;\nvoid f2(T&amp; param) &#123;\n\tusing std::cout;\n\tusing std::endl;\n\tusing boost::typeindex::type_id_with_cvr;\n\n\tcout &lt;&lt; &quot;匹配形参为T&amp;的模板函数:&quot; &lt;&lt; endl;\n\t&#x2F;&#x2F; 显示T的类型\n\tcout &lt;&lt; &quot;T&#39;s type &#x3D;\\t&quot;\n\t\t&lt;&lt; type_id_with_cvr&lt;T&gt;().pretty_name()\n\t\t&lt;&lt; endl;\n\n\t&#x2F;&#x2F; 显示param的类型(ParamType)\n\tcout &lt;&lt; &quot;param&#39;s type &#x3D;\\t&quot;\n\t\t&lt;&lt; type_id_with_cvr&lt;decltype(param)&gt;().pretty_name()\n\t\t&lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\tf1(someFunc);\n\tf2(someFunc);\n&#125;\n\n&#x2F;*\n匹配形参为T的模板函数:\nT&#39;s type &#x3D;      void (__cdecl*)(int,double)\nparam&#39;s type &#x3D;  void (__cdecl*)(int,double)\n匹配形参为T&amp;的模板函数:\nT&#39;s type &#x3D;      void __cdecl(int,double)\nparam&#39;s type &#x3D;  void (__cdecl&amp;)(int,double)\n*&#x2F;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","text":"类型推导C++是静态类型语言，所有的类型推导都是在编译期间完成的。 模板类型推导函数模板调用的一般形式为： template&lt;typename T&gt; void f(ParamType param); f(expr); 类型推导一共分三种一般情况和两种特殊情况 情况1：...","link":"","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"C++","slug":"C","count":1,"path":"api/categories/C.json"}],"tags":[{"name":"C++","slug":"C","count":1,"path":"api/tags/C.json"},{"name":"template","slug":"template","count":1,"path":"api/tags/template.json"},{"name":"类型推导","slug":"类型推导","count":1,"path":"api/tags/类型推导.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC\"><span class=\"toc-text\">类型推导</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%9D%BF%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC\"><span class=\"toc-text\">模板类型推导</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%83%85%E5%86%B51%EF%BC%9AParamType%E6%98%AF%E4%B8%AA%E6%8C%87%E9%92%88%E6%88%96%E5%BC%95%E7%94%A8%EF%BC%8C%E4%BD%86%E4%B8%8D%E6%98%AF%E4%B8%87%E8%83%BD%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">情况1：ParamType是个指针或引用，但不是万能引用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%83%85%E5%86%B52%EF%BC%9AParamType%E6%98%AF%E4%B8%87%E8%83%BD%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">情况2：ParamType是万能引用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%83%85%E5%86%B53%EF%BC%9AParamType%E6%97%A2%E9%9D%9E%E6%8C%87%E9%92%88%E4%B9%9F%E9%9D%9E%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">情况3：ParamType既非指针也非引用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B51%EF%BC%9A%E6%95%B0%E7%BB%84%E5%AE%9E%E5%8F%82\"><span class=\"toc-text\">特殊情况1：数组实参</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B52%EF%BC%9A%E5%87%BD%E6%95%B0%E5%AE%9E%E5%8F%82\"><span class=\"toc-text\">特殊情况2：函数实参</span></a></li></ol></li></ol></li></ol>","author":{"name":"Dylan","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/02/Uh28kIuHP3TD4tc.jpg","link":"/","description":"No Game No Life","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{}}